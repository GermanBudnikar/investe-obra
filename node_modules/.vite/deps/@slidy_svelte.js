import {
  he
} from "./chunk-A5B3RV2F.js";
import "./chunk-7CIVW3NA.js";
import {
  action,
  add_locations,
  check_target,
  each,
  element,
  handle_lazy_img,
  hmr,
  if_block,
  index,
  legacy_api,
  prop,
  remove_input_defaults,
  set_attribute,
  set_attributes,
  set_class,
  set_style,
  set_value,
  snippet,
  spread_props,
  toggle_class,
  validate_dynamic_element_tag,
  validate_each_keys,
  validate_prop_bindings,
  validate_void_dynamic_element,
  wrap_snippet
} from "./chunk-C3PGAAJU.js";
import {
  append,
  comment,
  ns_template,
  set_text,
  template
} from "./chunk-N2TOWOD4.js";
import {
  FILENAME,
  HMR,
  NAMESPACE_SVG,
  apply,
  child,
  delegate,
  derived,
  first_child,
  get,
  getContext,
  mark_module_end,
  mark_module_start,
  noop,
  pop,
  push,
  reset,
  set,
  setContext,
  sibling,
  strict_equals,
  template_effect
} from "./chunk-AR52KG2L.js";
import "./chunk-EXIRPMAV.js";
import "./chunk-5AQFBOJN.js";

// node_modules/@slidy/svelte/dist/components/Arrow/Arrow.svelte
mark_module_start();
Arrow[FILENAME] = "node_modules/@slidy/svelte/dist/components/Arrow/Arrow.svelte";
var root = add_locations(template(`<button><!></button>`), Arrow[FILENAME], [[14, 0]]);
function Arrow($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Arrow);
  validate_prop_bindings($$props, [], [], Arrow);
  let direction = prop($$props, "direction", 3, 1), loop = prop($$props, "loop", 3, false), index2 = prop($$props, "index", 3, 0), items = prop($$props, "items", 3, 0), step = prop($$props, "step", 3, 1), vertical = prop($$props, "vertical", 3, false);
  const classNames2 = getContext("classNames");
  const i18n = getContext("i18n");
  const disabled = derived(() => direction() < 0 ? strict_equals(index2(), 0) && !loop() : strict_equals(index2(), items() - 1) && !loop());
  const title = derived(() => direction() > 0 ? i18n.next : i18n.prev);
  var button = root();
  button.__click = function(...$$args) {
    apply(() => $$props.onclick, this, $$args, Arrow, [22, 2]);
  };
  var node = child(button);
  snippet(node, () => $$props.children ?? noop);
  reset(button);
  template_effect(() => {
    set_attribute(button, "aria-label", get(title));
    set_attribute(button, "aria-orientation", vertical() ? "vertical" : "horizontal");
    set_class(button, classNames2.arrow);
    set_attribute(button, "data-step", direction() * step());
    button.disabled = get(disabled);
    set_attribute(button, "title", get(title));
    toggle_class(button, "prev", direction() < 1);
  });
  append($$anchor, button);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow = hmr(Arrow, () => Arrow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow[HMR].source;
    set(Arrow[HMR].source, module.default[HMR].original);
  });
}
var Arrow_default = Arrow;
mark_module_end(Arrow);
delegate(["click"]);

// node_modules/@slidy/svelte/dist/components/Core/Core.svelte
mark_module_start();
Core[FILENAME] = "node_modules/@slidy/svelte/dist/components/Core/Core.svelte";
function Core($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Core);
  validate_prop_bindings($$props, [], [], Core);
  let animation = prop($$props, "animation", 19, () => void 0), axis = prop($$props, "axis", 3, "x"), clamp = prop($$props, "clamp", 3, 0), className = prop($$props, "className", 3, ""), duration = prop($$props, "duration", 3, 450), easing = prop($$props, "easing", 3, (t2) => t2), gravity = prop($$props, "gravity", 3, 1.2), indent = prop($$props, "indent", 3, 2), index2 = prop($$props, "index", 7, 0), loop = prop($$props, "loop", 3, false), plugins = prop($$props, "plugins", 19, () => []), position = prop($$props, "position", 7, 0), sensity = prop($$props, "sensity", 3, 5), snap = prop($$props, "snap", 19, () => void 0), tag = prop($$props, "tag", 3, "ol"), onindex = prop($$props, "onindex", 3, (e) => index2(e.detail.index)), onmove = prop($$props, "onmove", 3, (e) => position(e.detail.position));
  const action2 = he;
  var fragment = comment();
  var node = first_child(fragment);
  validate_void_dynamic_element(tag);
  validate_dynamic_element_tag(tag);
  element(
    node,
    tag,
    false,
    ($$element, $$anchor2) => {
      action($$element, ($$node, $$action_arg) => action2 == null ? void 0 : action2($$node, $$action_arg), () => ({
        animation: animation(),
        axis: axis(),
        clamp: clamp(),
        duration: duration(),
        easing: easing(),
        gravity: gravity(),
        indent: indent(),
        index: index2(),
        loop: loop(),
        plugins: plugins(),
        sensity: sensity(),
        snap: snap()
      }));
      let attributes;
      template_effect(() => attributes = set_attributes(
        $$element,
        attributes,
        {
          class: className(),
          "aria-live": "polite",
          role: "listbox",
          tabindex: "0",
          onmount: $$props.onmount,
          onkeys: $$props.onkeys,
          onupdate: $$props.onupdate,
          onresize: $$props.onresize,
          ondestroy: $$props.ondestroy,
          onindex: onindex(),
          onmove: onmove()
        },
        void 0,
        $$element.namespaceURI === NAMESPACE_SVG,
        $$element.nodeName.includes("-")
      ));
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      snippet(node_1, () => $$props.children ?? noop);
      append($$anchor2, fragment_1);
    },
    void 0,
    [34, 0]
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Core = hmr(Core, () => Core[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Core[HMR].source;
    set(Core[HMR].source, module.default[HMR].original);
  });
}
var Core_default = Core;
mark_module_end(Core);

// node_modules/@slidy/svelte/dist/components/Image/Image.svelte
mark_module_start();
Image[FILENAME] = "node_modules/@slidy/svelte/dist/components/Image/Image.svelte";
var root2 = add_locations(template(`<img>`), Image[FILENAME], [[10, 0]]);
function Image($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Image);
  validate_prop_bindings($$props, [], [], Image);
  let alt = prop($$props, "alt", 3, ""), decoding = prop($$props, "decoding", 3, "auto"), height = prop($$props, "height", 19, () => void 0), lazy = prop($$props, "lazy", 3, false), src = prop($$props, "src", 3, ""), width = prop($$props, "width", 19, () => void 0);
  const classNames2 = getContext("classNames");
  var img = root2();
  template_effect(() => {
    set_attribute(img, "alt", alt());
    set_attribute(img, "src", src());
    set_attribute(img, "width", width());
    set_attribute(img, "height", height());
    set_attribute(img, "decoding", decoding());
    set_class(img, classNames2["img"]);
    set_attribute(img, "loading", lazy() ? "lazy" : void 0);
  });
  handle_lazy_img(img);
  append($$anchor, img);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Image = hmr(Image, () => Image[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Image[HMR].source;
    set(Image[HMR].source, module.default[HMR].original);
  });
}
var Image_default = Image;
mark_module_end(Image);

// node_modules/@slidy/svelte/dist/assets/icons.js
var a = { viewBox: "0 0 32 32", path: "M19.56,24a.89.89,0,0,1-.63-.26L11.8,16.65a.92.92,0,0,1,0-1.27h0l7.13-7.16A.9.9,0,0,1,20.2,9.48L13.69,16l6.51,6.5a.91.91,0,0,1,0,1.26h0A.9.9,0,0,1,19.56,24Z" };

// node_modules/@slidy/svelte/dist/assets/scripts/utils.js
var c = (n, ...r) => {
  for (let t2 of r) n = n.replace("%s", t2.toString());
  return n;
};

// node_modules/@slidy/svelte/dist/assets/scripts/navigation.js
var m = (n, t2) => {
  let e = t2 - n + 1;
  return [...Array(e).keys()].map((c2) => c2 + n);
};
var h = ({ current: n, start: t2 = 0, end: e, limit: c2, siblings: r }) => {
  if (Math.max(5 + r * 2, e - t2 + 1) <= c2) return m(t2, e);
  let f = Math.max(n - r, t2), s = Math.min(n + r, e), i = f > 2, a2 = s < e - 1;
  if (!i && a2) return [...m(t2, 3 + 2 * r), -1, e];
  if (i && !a2) {
    let o = 3 + 2 * r, x = m(e - o + 1, e);
    return [t2, -1, ...x];
  }
  if (i && a2) {
    let o = m(f, s);
    return [t2, -1, ...o, -1, e];
  }
  return [];
};

// node_modules/@slidy/svelte/dist/components/Navigation/Navigation.svelte
mark_module_start();
Navigation[FILENAME] = "node_modules/@slidy/svelte/dist/components/Navigation/Navigation.svelte";
var root_1 = add_locations(template(`<button> </button>`), Navigation[FILENAME], [[35, 2]]);
var root3 = add_locations(template(`<nav aria-label="pagination"><button><svg><path></path></svg></button> <!> <button><svg><path></path></svg></button></nav>`), Navigation[FILENAME], [
  [
    23,
    0,
    [
      [
        24,
        1,
        [[25, 2, [[26, 3]]]]
      ],
      [
        51,
        1,
        [[52, 2, [[53, 3]]]]
      ]
    ]
  ]
]);
function Navigation($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Navigation);
  validate_prop_bindings($$props, [], [], Navigation);
  let current = prop($$props, "current", 3, 0), start = prop($$props, "start", 3, 0), end = prop($$props, "end", 3, 0), ordinal = prop($$props, "ordinal", 3, false), vertical = prop($$props, "vertical", 3, false), limit = prop($$props, "limit", 3, 7), siblings = prop($$props, "siblings", 3, 1);
  const classNames2 = getContext("classNames");
  const i18n = getContext("i18n");
  const setTitle = (i) => {
    if (strict_equals(i, start())) {
      return i18n.first;
    } else if (strict_equals(i, end())) {
      return i18n.last;
    } else {
      return c(i18n.slideN, i);
    }
  };
  const indices = h({
    current: current(),
    start: start(),
    end: end(),
    limit: limit(),
    siblings: siblings()
  });
  var nav = root3();
  var button = child(nav);
  set_attribute(button, "data-step", -1);
  button.__click = function(...$$args) {
    apply(() => $$props.onclick, this, $$args, Navigation, [24, 130]);
  };
  var svg = child(button);
  var path = child(svg);
  reset(svg);
  reset(button);
  var node = sibling(button, 2);
  each(node, 17, () => indices, index, ($$anchor2, item) => {
    var button_1 = root_1();
    const active = derived(() => strict_equals(get(item), current()));
    get(active);
    const contents = derived(() => get(item) < 0 ? "…" : get(item));
    get(contents);
    const ellipsis = derived(() => get(item) < 0);
    get(ellipsis);
    const title = derived(() => setTitle(get(item)));
    get(title);
    button_1.__click = function(...$$args) {
      apply(() => $$props.onclick, this, $$args, Navigation, [45, 4]);
    };
    var text = child(button_1, true);
    reset(button_1);
    template_effect(() => {
      set_attribute(button_1, "aria-current", get(active) ? "true" : void 0);
      set_attribute(button_1, "aria-label", get(title));
      set_class(button_1, classNames2["nav-item"]);
      set_attribute(button_1, "data-index", get(ellipsis) ? void 0 : get(item) - 1);
      button_1.disabled = get(ellipsis);
      set_attribute(button_1, "title", get(title));
      toggle_class(button_1, "active", get(active));
      toggle_class(button_1, "ellipsis", get(ellipsis));
      toggle_class(button_1, "ordinal", ordinal());
      set_text(text, ordinal() ? get(contents) : "");
    });
    append($$anchor2, button_1);
  });
  var button_2 = sibling(node, 2);
  set_attribute(button_2, "data-step", 1);
  button_2.__click = function(...$$args) {
    apply(() => $$props.onclick, this, $$args, Navigation, [51, 131]);
  };
  var svg_1 = child(button_2);
  var path_1 = child(svg_1);
  reset(svg_1);
  reset(button_2);
  reset(nav);
  template_effect(() => {
    set_attribute(nav, "aria-orientation", vertical() ? "vertical" : "horizontal");
    set_class(nav, classNames2 == null ? void 0 : classNames2.nav);
    set_attribute(button, "aria-label", i18n.first);
    set_class(button, `${classNames2["nav-item"] ?? ""} arrow`);
    button.disabled = current() <= 1;
    set_attribute(button, "title", i18n.prev);
    set_attribute(svg, "viewBox", a.viewBox);
    set_attribute(path, "d", a.path);
    set_attribute(button_2, "aria-label", i18n.first);
    set_class(button_2, `${classNames2["nav-item"] ?? ""} arrow`);
    button_2.disabled = current() >= end();
    set_attribute(button_2, "title", i18n.next);
    set_attribute(svg_1, "viewBox", a.viewBox);
    set_attribute(path_1, "d", a.path);
  });
  append($$anchor, nav);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Navigation = hmr(Navigation, () => Navigation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Navigation[HMR].source;
    set(Navigation[HMR].source, module.default[HMR].original);
  });
}
var Navigation_default = Navigation;
mark_module_end(Navigation);
delegate(["click"]);

// node_modules/@slidy/svelte/dist/components/Progress/Progress.svelte
mark_module_start();
Progress[FILENAME] = "node_modules/@slidy/svelte/dist/components/Progress/Progress.svelte";
var on_input = (e, change) => change()(e.currentTarget.valueAsNumber);
var root4 = add_locations(template(`<div><input class="slidy-progress-input" name="slidy-progress" type="range"> <span></span></div>`), Progress[FILENAME], [
  [12, 0, [[18, 1], [19, 1]]]
]);
function Progress($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Progress);
  validate_prop_bindings($$props, [], [], Progress);
  let value = prop($$props, "value", 3, 0), max = prop($$props, "max", 3, 1), vertical = prop($$props, "vertical", 3, false), change = prop($$props, "change", 3, (valueAsNumber) => valueAsNumber);
  const classNames2 = getContext("classNames");
  const progress = derived(() => () => Math.ceil(value() * 100 / max()));
  const size = derived(() => () => Math.ceil(100 / max()));
  var div = root4();
  var input = child(div);
  remove_input_defaults(input);
  set_attribute(input, "min", 1);
  input.__input = [on_input, change];
  var span = sibling(input, 2);
  reset(div);
  template_effect(() => {
    set_attribute(div, "aria-orientation", vertical() ? "vertical" : "horizontal");
    set_class(div, classNames2.progress);
    set_style(div, "--_slidy-progress-size", `${get(size) ?? ""}%`);
    set_style(div, "--_slidy-progress", `${get(progress) ?? ""}%`);
    set_value(input, value());
    set_attribute(input, "max", max());
    set_class(span, classNames2["progress-handle"]);
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Progress = hmr(Progress, () => Progress[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Progress[HMR].source;
    set(Progress[HMR].source, module.default[HMR].original);
  });
}
var Progress_default = Progress;
mark_module_end(Progress);
delegate(["input"]);

// node_modules/@slidy/svelte/dist/components/Thumbnail/Thumbnail.svelte
mark_module_start();
Thumbnail[FILENAME] = "node_modules/@slidy/svelte/dist/components/Thumbnail/Thumbnail.svelte";
var root_2 = add_locations(template(`<button aria-roledescription="slide"><!></button>`), Thumbnail[FILENAME], [[34, 2]]);
function Thumbnail($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Thumbnail);
  validate_prop_bindings($$props, [], [], Thumbnail);
  let active = prop($$props, "active", 3, 0), animation = prop($$props, "animation", 19, () => void 0), background = prop($$props, "background", 3, false), clamp = prop($$props, "clamp", 3, 0), duration = prop($$props, "duration", 3, 250), easing = prop($$props, "easing", 3, (t2) => t2), getImgSrc = prop($$props, "getImgSrc", 3, (item) => item.src ?? ""), gravity = prop($$props, "gravity", 3, 0.75), indent = prop($$props, "indent", 3, 0), index2 = prop($$props, "index", 3, 0), loop = prop($$props, "loop", 3, false), sensity = prop($$props, "sensity", 3, 5), slides = prop($$props, "slides", 19, () => []), snap = prop($$props, "snap", 19, () => void 0), select = prop($$props, "select", 3, () => {
  });
  const classNames2 = getContext("classNames");
  const i18n = getContext("i18n");
  var fragment = comment();
  var node = first_child(fragment);
  var className = derived(() => classNames2 == null ? void 0 : classNames2.thumbnails);
  Core_default(node, {
    get animation() {
      return animation();
    },
    get clamp() {
      return clamp();
    },
    get duration() {
      return duration();
    },
    get easing() {
      return easing();
    },
    get gravity() {
      return gravity();
    },
    get indent() {
      return indent();
    },
    get index() {
      return index2();
    },
    get loop() {
      return loop();
    },
    get sensity() {
      return sensity();
    },
    get snap() {
      return snap();
    },
    tag: "nav",
    axis: "x",
    get className() {
      return get(className);
    },
    children: wrap_snippet(Thumbnail, ($$anchor2, $$slotProps) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      validate_each_keys(slides, (item, i) => item.id ?? getImgSrc()(item) ?? i);
      each(node_1, 19, slides, (item, i) => item.id ?? getImgSrc()(item) ?? i, ($$anchor3, item, i) => {
        var button = root_2();
        const title = derived(() => c(i18n.slideN, get(i) + 1));
        get(title);
        button.__click = () => select()(get(i));
        const style_directive = derived(() => background() ? `url(${getImgSrc()(get(item))})` : "");
        var node_2 = child(button);
        {
          var consequent = ($$anchor4) => {
            var fragment_2 = comment();
            var node_3 = first_child(fragment_2);
            var src = derived(() => getImgSrc()(get(item)));
            Image_default(node_3, spread_props(
              {
                get src() {
                  return get(src);
                }
              },
              () => get(item)
            ));
            append($$anchor4, fragment_2);
          };
          if_block(node_2, ($$render) => {
            if (!background()) $$render(consequent);
          });
        }
        reset(button);
        template_effect(() => {
          set_attribute(button, "aria-current", strict_equals(get(i), active()) ? "true" : void 0);
          set_attribute(button, "aria-label", get(title));
          set_class(button, classNames2.thumbnail);
          set_attribute(button, "title", get(title));
          toggle_class(button, "active", strict_equals(get(i), active()));
          toggle_class(button, "bg", background());
          set_style(button, "--_slidy-slide-bg", get(style_directive));
        });
        append($$anchor3, button);
      });
      append($$anchor2, fragment_1);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Thumbnail = hmr(Thumbnail, () => Thumbnail[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Thumbnail[HMR].source;
    set(Thumbnail[HMR].source, module.default[HMR].original);
  });
}
var Thumbnail_default = Thumbnail;
mark_module_end(Thumbnail);
delegate(["click"]);

// node_modules/@slidy/svelte/dist/components/Slidy/slidy.styles.js
var classNames = {
  "arrow": "slidy-arrow",
  "autoplay": "slidy-autoplay",
  "counter": "slidy-counter",
  "img": "slidy-img",
  "nav": "slidy-nav",
  "nav-item": "slidy-nav-item",
  "overlay": "slidy-overlay",
  "progress": "slidy-progress",
  "progress-handle": "slidy-progress-handle",
  "root": "slidy",
  "slide": "slidy-slide",
  "slides": "slidy-slides",
  "thumbnail": "slidy-thumbnail",
  "thumbnails": "slidy-thumbnails"
};

// node_modules/@slidy/svelte/dist/assets/i18n.js
var t = { carousel: "carousel", counter: "%s de %s", first: "Go to the first slide", last: "Go to the last slide", next: "Go to the next slide", play: "Start autoplay", prev: "Return back to previous slide", slide: "slide", slideN: "flamengo %s", stop: "Stop autoplay" };

// node_modules/@slidy/svelte/dist/components/Slidy/Slidy.svelte
mark_module_start();
Slidy[FILENAME] = "node_modules/@slidy/svelte/dist/components/Slidy/Slidy.svelte";
var root_22 = add_locations(template(`<output> </output>`), Slidy[FILENAME], [[78, 4]]);
var root_12 = add_locations(template(`<div><!> <!></div>`), Slidy[FILENAME], [[76, 2]]);
var root_4 = add_locations(template(`<li role="group"><!></li>`), Slidy[FILENAME], [[111, 3]]);
var root_14 = add_locations(ns_template(`<svg class="slidy-arrow-icon" xmlns="http://www.w3.org/2000/svg"><path></path></svg>`), Slidy[FILENAME], [[137, 6, [[138, 7]]]]);
var root5 = add_locations(template(`<section><!> <!> <!> <!> <!> <!></section>`), Slidy[FILENAME], [[68, 0]]);
function Slidy($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Slidy);
  validate_prop_bindings($$props, ["index", "position"], [], Slidy);
  let animation = prop($$props, "animation", 19, () => void 0), arrows = prop($$props, "arrows", 3, true), axis = prop($$props, "axis", 3, "x"), background = prop($$props, "background", 3, false), counter = prop($$props, "counter", 3, true), clamp = prop($$props, "clamp", 3, 0), classNames2 = prop($$props, "classNames", 3, classNames), duration = prop($$props, "duration", 3, 450), easing = prop($$props, "easing", 3, (t2) => t2), getImgSrc = prop($$props, "getImgSrc", 3, (item) => item.src || ""), getThumbSrc = prop($$props, "getThumbSrc", 3, (item) => getImgSrc()(item)), navigation = prop($$props, "navigation", 3, false), gravity = prop($$props, "gravity", 3, 1.2), i18n = prop($$props, "i18n", 3, t), indent = prop($$props, "indent", 3, 2), index2 = prop($$props, "index", 15, 0), position = prop($$props, "position", 11, 0), loop = prop($$props, "loop", 3, false), groups = prop($$props, "groups", 3, 0), plugins = prop($$props, "plugins", 19, () => []), progress = prop($$props, "progress", 3, false), sensity = prop($$props, "sensity", 3, 5), slides = prop($$props, "slides", 19, () => []), snap = prop($$props, "snap", 19, () => void 0), thumbnail = prop($$props, "thumbnail", 3, false), vertical = prop($$props, "vertical", 3, false);
  setContext("classNames", classNames2());
  setContext("i18n", i18n());
  const length = derived(() => slides().length);
  const handleClick = (event) => {
    const element2 = event.target;
    if (strict_equals(element2.nodeName, "BUTTON", false)) return;
    if (element2.dataset.index) {
      index2(parseInt(element2.dataset.index));
      return;
    }
    if (element2.dataset.step) {
      index2(parseInt(element2.dataset.step) + index2());
      return;
    }
  };
  var section = root5();
  var node = child(section);
  {
    var consequent_1 = ($$anchor2) => {
      var div = root_12();
      var node_1 = child(div);
      {
        var consequent = ($$anchor3) => {
          var output = root_22();
          var text = child(output, true);
          template_effect(() => set_text(text, c(i18n().counter, index2() + 1, get(length))));
          reset(output);
          template_effect(() => {
            var _a;
            return set_class(output, (_a = classNames2()) == null ? void 0 : _a.counter);
          });
          append($$anchor3, output);
        };
        if_block(node_1, ($$render) => {
          if (counter()) $$render(consequent);
        });
      }
      var node_2 = sibling(node_1, 2);
      snippet(node_2, () => $$props.overlay ?? noop);
      reset(div);
      template_effect(() => {
        var _a;
        return set_class(div, (_a = classNames2()) == null ? void 0 : _a.overlay);
      });
      append($$anchor2, div);
    };
    if_block(node, ($$render) => {
      if (counter()) $$render(consequent_1);
    });
  }
  var node_3 = sibling(node, 2);
  var className = derived(() => {
    var _a;
    return (_a = classNames2()) == null ? void 0 : _a.slides;
  });
  Core_default(node_3, {
    get animation() {
      return animation();
    },
    get axis() {
      return axis();
    },
    get clamp() {
      return clamp();
    },
    get duration() {
      return duration();
    },
    get easing() {
      return easing();
    },
    get gravity() {
      return gravity();
    },
    get indent() {
      return indent();
    },
    get index() {
      return index2();
    },
    get position() {
      return position();
    },
    get loop() {
      return loop();
    },
    get plugins() {
      return plugins();
    },
    get sensity() {
      return sensity();
    },
    get snap() {
      return snap();
    },
    get onmove() {
      return $$props.onmove;
    },
    get onkeys() {
      return $$props.onkeys;
    },
    get onmount() {
      return $$props.onmount;
    },
    get onresize() {
      return $$props.onresize;
    },
    get onupdate() {
      return $$props.onupdate;
    },
    get ondestroy() {
      return $$props.ondestroy;
    },
    get className() {
      return get(className);
    },
    onindex: (e) => index2(e.detail.index),
    children: wrap_snippet(Slidy, ($$anchor2, $$slotProps) => {
      var fragment = comment();
      var node_4 = first_child(fragment);
      validate_each_keys(slides, (item, i) => item.id ?? getImgSrc()(item) ?? i);
      each(node_4, 19, slides, (item, i) => item.id ?? getImgSrc()(item) ?? i, ($$anchor3, item, i) => {
        var li = root_4();
        const active = derived(() => strict_equals(get(i), index2()));
        get(active);
        template_effect(() => set_attribute(li, "aria-label", c(i18n().counter, get(i), get(length))));
        const style_directive = derived(() => background() ? `url(${getImgSrc()(get(item))}` : void 0);
        var node_5 = child(li);
        {
          var consequent_2 = ($$anchor4) => {
            var fragment_1 = comment();
            var node_6 = first_child(fragment_1);
            snippet(node_6, () => $$props.slide, () => get(item));
            append($$anchor4, fragment_1);
          };
          var alternate = ($$anchor4) => {
            var fragment_2 = comment();
            var node_7 = first_child(fragment_2);
            {
              var consequent_3 = ($$anchor5) => {
                var fragment_3 = comment();
                var node_8 = first_child(fragment_3);
                var src = derived(() => getImgSrc()(get(item)));
                Image_default(node_8, spread_props(
                  {
                    get src() {
                      return get(src);
                    }
                  },
                  () => get(item)
                ));
                append($$anchor5, fragment_3);
              };
              if_block(
                node_7,
                ($$render) => {
                  if (!background()) $$render(consequent_3);
                },
                true
              );
            }
            append($$anchor4, fragment_2);
          };
          if_block(node_5, ($$render) => {
            if ($$props.slide) $$render(consequent_2);
            else $$render(alternate, false);
          });
        }
        reset(li);
        template_effect(() => {
          var _a;
          set_attribute(li, "aria-current", get(active) ? "true" : void 0);
          set_attribute(li, "aria-roledescription", i18n().slide);
          set_class(li, (_a = classNames2()) == null ? void 0 : _a.slide);
          toggle_class(li, "active", get(active));
          toggle_class(li, "bg", background());
          set_style(li, "--_slidy-slide-bg", get(style_directive));
        });
        append($$anchor3, li);
      });
      append($$anchor2, fragment);
    }),
    $$slots: { default: true }
  });
  var node_9 = sibling(node_3, 2);
  {
    var consequent_6 = ($$anchor2) => {
      var fragment_4 = comment();
      var node_10 = first_child(fragment_4);
      {
        var consequent_4 = ($$anchor3) => {
          var fragment_5 = comment();
          var node_11 = first_child(fragment_5);
          snippet(node_11, () => $$props.arrrows ?? noop);
          append($$anchor3, fragment_5);
        };
        var alternate_2 = ($$anchor3) => {
          var fragment_6 = comment();
          var node_12 = first_child(fragment_6);
          each(node_12, 16, () => [-1, 1], index, ($$anchor4, direction) => {
            var fragment_7 = comment();
            var node_13 = first_child(fragment_7);
            var step = derived(() => clamp() > 0 ? clamp() : 1);
            Arrow_default(node_13, {
              get direction() {
                return direction;
              },
              get index() {
                return index2();
              },
              get loop() {
                return loop();
              },
              get vertical() {
                return vertical();
              },
              get items() {
                return get(length);
              },
              get step() {
                return get(step);
              },
              onclick: handleClick,
              children: wrap_snippet(Slidy, ($$anchor5, $$slotProps) => {
                var fragment_8 = comment();
                var node_14 = first_child(fragment_8);
                {
                  var consequent_5 = ($$anchor6) => {
                    var fragment_9 = comment();
                    var node_15 = first_child(fragment_9);
                    snippet(node_15, () => $$props.arrrow ?? noop);
                    append($$anchor6, fragment_9);
                  };
                  var alternate_1 = ($$anchor6) => {
                    var svg = root_14();
                    var path = child(svg);
                    reset(svg);
                    template_effect(() => {
                      set_attribute(svg, "viewBox", a.viewBox);
                      set_attribute(path, "d", a.path);
                    });
                    append($$anchor6, svg);
                  };
                  if_block(node_14, ($$render) => {
                    if ($$props.arrrow) $$render(consequent_5);
                    else $$render(alternate_1, false);
                  });
                }
                append($$anchor5, fragment_8);
              }),
              $$slots: { default: true }
            });
            append($$anchor4, fragment_7);
          });
          append($$anchor3, fragment_6);
        };
        if_block(node_10, ($$render) => {
          if ($$props.arrrows) $$render(consequent_4);
          else $$render(alternate_2, false);
        });
      }
      append($$anchor2, fragment_4);
    };
    if_block(node_9, ($$render) => {
      if (arrows()) $$render(consequent_6);
    });
  }
  var node_16 = sibling(node_9, 2);
  {
    var consequent_7 = ($$anchor2) => {
      var fragment_10 = comment();
      var node_17 = first_child(fragment_10);
      var value = derived(() => index2() + 1);
      Progress_default(node_17, {
        get value() {
          return get(value);
        },
        get max() {
          return get(length);
        },
        change: (valueAsNumber) => index2(valueAsNumber - 1),
        get vertical() {
          return vertical();
        }
      });
      append($$anchor2, fragment_10);
    };
    if_block(node_16, ($$render) => {
      if (progress()) $$render(consequent_7);
    });
  }
  var node_18 = sibling(node_16, 2);
  {
    var consequent_9 = ($$anchor2) => {
      var fragment_11 = comment();
      var node_19 = first_child(fragment_11);
      {
        var consequent_8 = ($$anchor3) => {
          var fragment_12 = comment();
          var node_20 = first_child(fragment_12);
          snippet(node_20, () => $$props.thumbnails);
          append($$anchor3, fragment_12);
        };
        var alternate_3 = ($$anchor3) => {
          var fragment_13 = comment();
          var node_21 = first_child(fragment_13);
          Thumbnail_default(node_21, {
            get background() {
              return background();
            },
            get duration() {
              return duration();
            },
            get easing() {
              return easing();
            },
            get indent() {
              return indent();
            },
            get loop() {
              return loop();
            },
            get sensity() {
              return sensity();
            },
            get slides() {
              return slides();
            },
            get active() {
              return index2();
            },
            get index() {
              return index2();
            },
            get getImgSrc() {
              return getThumbSrc();
            },
            select: (indx) => index2(indx)
          });
          append($$anchor3, fragment_13);
        };
        if_block(node_19, ($$render) => {
          if ($$props.thumbnails) $$render(consequent_8);
          else $$render(alternate_3, false);
        });
      }
      append($$anchor2, fragment_11);
    };
    if_block(node_18, ($$render) => {
      if (thumbnail()) $$render(consequent_9);
    });
  }
  var node_22 = sibling(node_18, 2);
  {
    var consequent_10 = ($$anchor2) => {
      var fragment_14 = comment();
      var node_23 = first_child(fragment_14);
      var current = derived(() => index2() + 1);
      Navigation_default(node_23, {
        get current() {
          return get(current);
        },
        start: 1,
        get end() {
          return get(length);
        },
        get vertical() {
          return vertical();
        },
        onclick: handleClick
      });
      append($$anchor2, fragment_14);
    };
    if_block(node_22, ($$render) => {
      if (navigation()) $$render(consequent_10);
    });
  }
  reset(section);
  template_effect(() => {
    var _a;
    set_attribute(section, "aria-roledescription", i18n().carousel);
    set_attribute(section, "aria-orientation", vertical() ? "vertical" : "horizontal");
    set_class(section, (_a = classNames2()) == null ? void 0 : _a.root);
    toggle_class(section, "groups", groups() > 1);
    set_style(section, "--slidy-group-items", groups());
  });
  append($$anchor, section);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Slidy = hmr(Slidy, () => Slidy[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Slidy[HMR].source;
    set(Slidy[HMR].source, module.default[HMR].original);
  });
}
var Slidy_default = Slidy;
mark_module_end(Slidy);
export {
  Core_default as Core,
  Slidy_default as Slidy,
  classNames
};
//# sourceMappingURL=@slidy_svelte.js.map
